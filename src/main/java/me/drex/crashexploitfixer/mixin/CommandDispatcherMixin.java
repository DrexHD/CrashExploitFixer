package me.drex.crashexploitfixer.mixin;

import com.llamalad7.mixinextras.injector.wrapoperation.Operation;
import com.llamalad7.mixinextras.injector.wrapoperation.WrapOperation;
import com.llamalad7.mixinextras.sugar.Local;
import com.llamalad7.mixinextras.sugar.Share;
import com.llamalad7.mixinextras.sugar.ref.LocalBooleanRef;
import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.ParseResults;
import com.mojang.brigadier.StringReader;
import com.mojang.brigadier.context.CommandContextBuilder;
import com.mojang.brigadier.exceptions.CommandSyntaxException;
import com.mojang.brigadier.tree.CommandNode;
import me.drex.crashexploitfixer.TagParseCommandSyntaxException;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

import java.util.Map;

@Mixin(CommandDispatcher.class)
public abstract class CommandDispatcherMixin {

    @WrapOperation(
        method = "parseNodes",
        at = @At(
            value = "INVOKE",
            target = "Lcom/mojang/brigadier/tree/CommandNode;parse(Lcom/mojang/brigadier/StringReader;Lcom/mojang/brigadier/context/CommandContextBuilder;)V"
        ),
        remap = false
    )
    public <S> void detectTagParseException(
        CommandNode<S> instance, StringReader stringReader, CommandContextBuilder<S> builder, Operation<Void> original,
        @Share(value = "stop") LocalBooleanRef stopRef
    ) {
        stopRef.set(false);
        try {
            original.call(instance, stringReader, builder);
        } catch (Exception e) {
            if (e instanceof TagParseCommandSyntaxException) {
                stopRef.set(true);
                throw e;
            }
        }
    }

    @Inject(
        method = "parseNodes",
        at = @At(
            value = "INVOKE",
            target = "Lcom/mojang/brigadier/StringReader;setCursor(I)V",
            shift = At.Shift.AFTER
        ),
        remap = false,
        cancellable = true
    )
    public <S> void returnEarly(
        CommandNode<S> node, StringReader originalReader, CommandContextBuilder<S> contextSoFar,
        CallbackInfoReturnable<ParseResults<S>> cir,
        @Local(ordinal = 0) Map<CommandNode<S>, CommandSyntaxException> errors,
        @Share(value = "stop") LocalBooleanRef stopRef
    ) {
        if (stopRef.get()) {
            cir.setReturnValue(new ParseResults<>(contextSoFar, originalReader, errors));
        }
    }

}
