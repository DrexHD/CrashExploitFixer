import org.jetbrains.changelog.Changelog

plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.6.3"
    id 'org.jetbrains.changelog' version '2.+'
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version + "+" + rootProject.minecraft_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}


publishMods {
    changelog = fetchChangelog()
    type = STABLE

    def nameFormat = "CrashExploitFixer %s ${version.get()}"
    def fabric = findProject(':fabric')
    def forge = findProject(':forge')
    def neoforge = findProject(':neoforge')

    def curseforgeOpts = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        for (final def minecraft_version in supported_minecraft_version.split(",")) {
            minecraftVersions.add(minecraft_version)
        }
        projectId = "1079896"
    }

    def modrinthOpts = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        for (final def minecraft_version in supported_minecraft_version.split(",")) {
            minecraftVersions.add(minecraft_version)
        }
        projectId = "Z5GdSH3X"
    }

    def githubFiles = []

    if (fabric != null) {
        def fabricJar = fabric.remapJar.archiveFile
        githubFiles.add(fabricJar)

        curseforge("CurseForge - Fabric") {
            from curseforgeOpts
            file = fabricJar
            modLoaders.add("fabric")
            modLoaders.add("quilt")
            displayName = nameFormat.formatted("Fabric")
        }

        modrinth("Modrinth - Fabric") {
            from modrinthOpts
            file = fabricJar
            modLoaders.add("fabric")
            modLoaders.add("quilt")
            displayName = nameFormat.formatted("Fabric")
        }
    }

    if (forge != null) {
        def forgeJar = forge.remapJar.archiveFile
        githubFiles.add(forgeJar)

        curseforge("CurseForge - Forge") {
            from curseforgeOpts
            file = forgeJar
            modLoaders.add("forge")
            displayName = nameFormat.formatted("Forge")
        }

        modrinth("Modrinth - Forge") {
            from modrinthOpts
            file = forgeJar
            modLoaders.add("forge")
            displayName = nameFormat.formatted("Forge")
        }
    }

    if (neoforge != null) {
        def neoforgeJar = neoforge.remapJar.archiveFile
        githubFiles.add(neoforgeJar)

        curseforge("CurseForge - NeoForge") {
            from curseforgeOpts
            file = neoforgeJar
            modLoaders.add("neoforge")
            displayName = nameFormat.formatted("NeoForge")
        }

        modrinth("Modrinth - NeoForge") {
            from modrinthOpts
            file = neoforgeJar
            modLoaders.add("neoforge")
            displayName = nameFormat.formatted("NeoForge")
        }
    }

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("DrexHD/dryrun")
        commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("dryrun")
        // Workaround for https://github.com/modmuss50/mod-publish-plugin/issues/29
        githubFiles.each {
            if (it != null) {
                if (!file.isPresent()) {
                    file.set(it)
                } else {
                    additionalFiles.from(it)
                }
            }
        }
    }

    dryRun = githubFiles.isEmpty() || curseforgeOpts.get().accessToken.getOrNull() == null || modrinthOpts.get().accessToken.getOrNull() == null || curseforgeOpts.get().accessToken.getOrNull() == null
}

private String fetchChangelog() {
    def log = getChangelog.changelog.get()
    if (log.has(project.mod_version)) {
        return log.renderItem(
                log.get(project.mod_version).withHeader(false),
                Changelog.OutputType.MARKDOWN
        )
    } else {
        return ""
    }
}
